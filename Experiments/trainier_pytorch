import torch
import torchvision
import pycocotools
from torchvision.models.detection.faster_rcnn import FasterRCNN
from torchvision.models.detection.backbone_utils import resnet_fpn_backbone

# Load the COCO dataset
dataset = torchvision.datasets.CocoDetection(root='FinalYearProject\COCO Dataset\Cat\Cat', annFile='COCO Dataset\Cat\Cat.json')

# Define the data loader
data_loader = torch.utils.data.DataLoader(dataset, batch_size=2, shuffle=True, num_workers=4, collate_fn=collate_fn)

# Load a pre-trained resnet-50 backbone
backbone = resnet_fpn_backbone('resnet50', pretrained=True)

# Create the Faster R-CNN model
model = FasterRCNN(backbone, num_classes=len(dataset.classes))

# Move the model to GPU
device = torch.device("cuda") if torch.cuda.is_available() else torch.device("cpu")
model.to(device)

# Define the loss function and optimizer
criterion = torch.nn.CrossEntropyLoss()
optimizer = torch.optim.SGD(model.parameters(), lr=0.005, momentum=0.9, weight_decay=0.0005)

# Train the model for a specified number of epochs
num_epochs = 100
for epoch in range(num_epochs):
    for images, targets in data_loader:
        images = images.to(device)
        targets = [{k: v.to(device) for k, v in t.items()} for t in targets]

        # Forward pass
        outputs = model(images)
        loss_dict = criterion(outputs, targets)

        # Backward pass and optimization
        optimizer.zero_grad()
        loss_dict["loss"].backward()
        optimizer.step()

    print("Epoch [{}/{}], Loss: {:.4f}".format(epoch+1, num_epochs, loss_dict["loss"].item()))

# Save the trained model
torch.save(model.state_dict(), "faster_rcnn_imagenet_coco.pth")
